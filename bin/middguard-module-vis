#!/usr/bin/env node

let program = require('commander');
const chalk = require('chalk');
const path = require('path');
const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs'));
const mkdirp = Promise.promisify(require('mkdirp'));
const _ = require('lodash');

program
  .version(require('../package.json').version)
  .option('-n, --name [name]', 'The name for the module', 'my-vis')
  .parse(process.argv);

const context = {
  moduleName: program.name,
  mainView: program.name.split('-').map(initialCap).join(''),
  displayName: program.name.split('-').map(initialCap).join(' ')
};

function initialCap(word) {
  return `${word.charAt(0).toUpperCase()}${word.slice(1)}`;
}

return mkdirp(path.join(context.moduleName, 'static'))
.then(() => {
  return Promise.map([
    'visualization-module/index.js',
    'visualization-module/static/<%- moduleName %>.css',
    'visualization-module/static/<%- moduleName %>.js'
  ], (filename) => {
    return Promise.props({
      name: filename,
      file: fs.readFileAsync(path.join(__dirname, 'templates', filename), 'utf-8')
    });
  })
})
.each((file) => {
  const templated = _.template(file.file)(context);
  file.name = _.template(file.name)(context);
  file.name = file.name.replace('visualization-module', context.moduleName);

  return fs.writeFileAsync(path.join(process.cwd(), file.name), templated);
})
.each((file) => {
  console.log(chalk.green(`Wrote ${file.name}.`));
});
